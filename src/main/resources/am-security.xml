<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:sec="http://www.springframework.org/schema/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util" xmlns:security="http://www.springframework.org/schema/security"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
          http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd
          http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd
          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
          http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd">

    <aop:aspectj-autoproxy />
    
    <bean class="com.actualize.mortgage.sercurity.AuthenticationListener"/>

    <bean id="customUserDetailsService" class="com.actualize.mortgage.sercurity.UserDetailsService" />

    <bean id="daoAuthenticationProvider" class="com.actualize.mortgage.sercurity.AMAuthenticationProvider">
        <property name="userDetailsService" ref="customUserDetailsService" />
        <property name="passwordEncoder">
            <bean class="org.springframework.security.authentication.encoding.ShaPasswordEncoder">
                <constructor-arg value="256" />
            </bean>
        </property>
        <property name="saltSource">
            <bean class="org.springframework.security.authentication.dao.ReflectionSaltSource">
                <property name="userPropertyToUse" value="username" />
            </bean>
        </property>
    </bean>

    <sec:authentication-manager alias="authenticationManager">
        <sec:authentication-provider ref="daoAuthenticationProvider" />
    </sec:authentication-manager>

    <bean id="myfilterChainProxy" class="org.springframework.security.web.FilterChainProxy">
        <sec:filter-chain-map request-matcher="ant">
            <sec:filter-chain pattern="/**" filters="httpSessionContextIntegrationFilter" />
        </sec:filter-chain-map>
    </bean>

    <bean id="httpSessionContextIntegrationFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter" />

    <!-- Our custom authentication entry point which can respond nicely to flex requests but also can provide standard form login func on demand -->
    <bean id="authEntryPoint" class="com.actualize.mortgage.sercurity.AMAuthenticationEntryPoint" />

    <!-- The standard form login filter which we will invoke manually if needed -->
    <bean id="standardFormLoginEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <constructor-arg value="/login.html"></constructor-arg>
    </bean>

    <!-- This would generally be provided by the sec:form-login tag but since we have removed that we need to explicitly define it -->
    <bean id="standardUsernamePasswordAuthFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
        <property name="authenticationManager" ref="authenticationManager" />
    </bean>
    <bean id="sessionProtectionFilter" class="com.actualize.mortgage.sercurity.SessionProtectionFilter">
        <property name="updateSession" value="/user/login" />
    </bean>
    <sec:http auto-config='false' use-expressions="true" disable-url-rewriting="true" create-session="always">
        <sec:form-login />
        <sec:anonymous />
        <sec:csrf disabled="true"/>
        <sec:session-management session-fixation-protection="newSession"></sec:session-management>

        <sec:custom-filter after="LAST" ref="standardUsernamePasswordAuthFilter" />
        <sec:custom-filter ref="sessionProtectionFilter" before="SESSION_MANAGEMENT_FILTER" />
        <sec:session-management invalid-session-url="/logout.html">
        </sec:session-management>
        <sec:logout invalidate-session="true" logout-url="/logout" logout-success-url="/login.html" />

        <sec:intercept-url pattern="/services/user/registerUser" access="permitAll" />
        <sec:intercept-url pattern="/services/*" access="isAuthenticated()" />
    </sec:http>
    
     <bean id="sessionContext" class="com.actualize.mortgage.sercurity.SessionContext" scope="session" >
        <aop:scoped-proxy />
    </bean>
</beans>